# -*- coding: utf-8 -*-
""" leetcode 877
亚历克斯(A)和李用(L)几堆石子在做游戏。偶数堆石子排成一行，每堆都有正整数颗石子 piles[i] 。
游戏以谁手中的石子最多来决出胜负。石子的总数是奇数，所以没有平局。
亚历克斯和李轮流进行，亚历克斯先开始。 每回合，玩家从行的 开始 或 结束 处取走整堆石头。
这种情况一直持续到没有更多的石子堆为止，此时手中石子最多的玩家获胜。
假设亚历克斯(A)和李(L)都发挥出最佳水平，当亚历克斯(A)赢得比赛时返回 true ，当李(L)赢得比赛时返回 false 。

示例：
输入：[5,3,4,5]
输出：true
解释：
亚历克斯(A)先开始，只能拿前 5 颗或后 5 颗石子 。
假设 A 取了前 5 颗，这一行就变成了 [3,4,5] 。
如果 L 拿走前 3 颗，那么剩下的是 [4,5]，A 拿走后 5 颗赢得 10 分。
如果 L 拿走后 5 颗，那么剩下的是 [3,4]，A 拿走后 4 颗赢得 9 分。
这表明，取前 5 颗石子对 A 来说是一个胜利的举动，所以我们返回 true 。

提示：
2 <= piles.length <= 500
piles.length 是偶数。
1 <= piles[i] <= 500
sum(piles) 是奇数。
"""


class Solution:
    def stoneGame(self, piles: list) -> bool:
        """
        由于 piles 是偶数的，并且 piles 的总和是奇数的。
        因此 Alex可以做到要不拿的全部是奇数，要么全部是偶数。
        举个例子： 比如 Alex 第一次先拿第一个
        这里有两种情况：
        1. Lee 如果拿了第二块（偶数），那么 Alex 继续拿第三块，以此类推。。。
        2. Lee 如果拿了最后一块（偶数），那么 Alex 继续拿倒数第二块，以此类推。。。
        因此 Alex可以做到只拿奇数或者偶数，只是他可以控制的，因此他要做的就是数一下，奇数加起来多还是偶数加起来多就好了。
        奇数多就全部选奇数，偶数就全部选偶数。 Lee 是没有这种自由权的。
        所以谁先拿谁就赢。
        """
        return True


if __name__ == '__main__':
    s = Solution()

    arr1 = [5, 3, 4, 5]
    arr2 = [2, 7, 9, 4, 4]
    arr3 = [5, 7, 3, 3, 5, 4]
    arrs = [arr1, arr2, arr3]

    for arr in arrs:
        res = s.stoneGame(arr)
        print(res)

    print('-- over --')
