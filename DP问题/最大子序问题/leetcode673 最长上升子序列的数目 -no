# -*- coding: utf-8 -*-
"""
题目描述: 给定一个未排序的整数数组，找到最长递增子序列的个数。

示例1
输入: [1,3,5,4,7]
输出: 2
解释: 有两个最长递增子序列，分别是 [1, 3, 4, 7] 和[1, 3, 5, 7]。

示例2
输入: [2,2,2,2,2]
输出: 5
解释: 最长递增子序列的长度是1，并且存在5个子序列的长度为1，因此输出5。
"""

def findNumberOfLIS(nums: list) -> int:
    length = len(nums)

    # if length <= 1:
    #     return length

    # dp[最长上升子序列长度, LIS长度的子序列数目], 记录最长上升子序列的长度
    # [[1, 1], [2, 1], [3, 1], [3, 1], [4, 1]], 4
    dp, longest = [[1, 1] for _ in range(length)], 1

    for i in range(length):
        curr_longest, count = 1, 0

        # 记录当前位置的最长上升子序列长度
        for j in range(i):
            if nums[j] < nums[i]:
                curr_longest = max(curr_longest, dp[j][0] + 1)
        # dp[i] = [curr_longest, 1]

        # [1, 3, 5, 4, 7]
        # 记录i位置时，最长上升子序列的次数
        for j in range(i):
            if nums[j] < nums[i] and dp[j][0] == curr_longest - 1:
                count += dp[j][1]

        # 记录 dp[最长上升子序列长度, LIS长度的子序列数目]
        dp[i] = [curr_longest, max(count, dp[i][1])]

        # 遍历到i位置时，刷新最长上升子序列的长度
        longest = max(longest, curr_longest)

    print(dp)
    return sum([item[1] for item in dp if item[0] == longest])


if __name__ == '__main__':
    nums = [1,3,5,4,7]
    print(findNumberOfLIS(nums))

    nums = [2,2,2,2,2]
    print(findNumberOfLIS(nums))

    nums = [3]
    print(findNumberOfLIS(nums))
    ...
