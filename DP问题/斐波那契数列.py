"""
递推公式：f(n) = f(n-1) + f(n-2)
1 2 3 4 5 6 7 ...
0 1 1 2 3 5 8 ...

递归算法的时间复杂度怎么计算？就是用子问题个数乘以解决一个子问题需要的时间。

1.首先计算子问题个数，即递归树中节点的总数。显然二叉树节点总数为指数级别，所以子问题个数为 O(2^n)。

2.然后计算解决一个子问题的时间，在本算法中，没有循环，只有 f(n - 1) + f(n - 2) 一个加法操作，时间为 O(1)。

所以，这个算法的时间复杂度为二者相乘，即 O(2^n)，指数级别，爆炸。
"""


def fib(n: int):
    if n == 0 or n == 1: return n
    return fib(n - 1) + fib(n - 2)


def input_n(n: int):
    for i in range(n):
        print(fib(i), end=' ')


if __name__ == '__main__':
    input_n(5)
